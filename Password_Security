# LOOPS

# Let's start to create a program that assesses the strength of a password by checking the number of possible permutations. Permutations are the number of possible configurations of the password characters.
# The strength of the password will depend on the number of characters, but for our example, we'll use a 6-character password.
# Assuming a hacker knows the characters to our client's password, all they have to do is try the different permutations. We can find the maximum number of permutations they might need by multiplying all the numbers leading to the number of characters, starting from 1. For example, a 4-character password will have 1 x 2 x 3 x 4 = 24 possible combinations.
# Let's create a loop to find out the number of permutations to our client's password.
# We now know the number of possible permutations. This is also the maximum number of attempts a hacker will need to gain access to the account.
# But it won't be that easy! The client shared that the account has a locking mechanism to prevent hacking. The account will be locked for some time after every 5 wrong attempts.
# Since the number of possible permutations is also the maximum number of attempts needed to access the account, we can use permutations to check how long the account may be locked. We can divide the permutations by the number of attempts it will take to lock the account, which we know is 5.
# The locking time also depends on how many times the account was locked before. Let's create some more variables that store this information.
# Time to test the program! Let's simulate a hacker attempting to guess the password too many times and the account being locked.
# We'll use a for loop for that. Every time the hacker has a wrong attempt, the account will be locked for some minutes. We can calculate the minutes by multiplying the number of times the account was locked before by the lock_time_multiplier.
# We simulated the account being locked and the program seems to be working. Finally, let's notify the client how long the account was locked.


password_length = 6
counter = 1
permutations = 1

while counter <= password_length:
  permutations = counter * permutations
  counter += 1

print(f"The possible combination of a {password_length}-character password is: {permutations}")

attempts = 5
max_lock = permutations / attempts
max_lock = int(max_lock)

print(f"The maximum number of times the account might be locked is {max_lock} times.")

locks = 0
total_lock_time = 0
lock_time_multiplier = 5

for i in range(max_lock):
  locks = locks + 1
  total_lock_time = locks * (lock_time_multiplier + total_lock_time)
  print(f"Your account is locked for {lock_time_multiplier*locks} minutes")

print(f"Assuming the hacker only got the password right with the last possible combination, your account would have been locked for {total_lock_time} minutes in total.")
